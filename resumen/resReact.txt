Conceptos importantes que hay que entender en React:

What is React?
React is a JavaScript library – one of the most popular ones, with over 100,000 stars on GitHub.
React is not a framework (unlike Angular, which is more opinionated).
React is an open-source project created by Facebook.
React is used to build user interfaces (UI) on the front end.
React is the view layer of an MVC application (Model View Controller)


JSX = JavaScript + XML

* Con JSX podemos escribir codigo simil HTML como por ejemplo:

const heading = <h1 className="site-heading">Hello, React</h1>;

* className se usa en vez de clase a la hora de agregar clases de CSS ya que class es una palabra reservada en JS.

* Las propiedades y métodos en JSX usan camelCase, ejemplo: onclick ---> onClick.

* Siempre los tags autocerrables tienen que tener barra inclinada, ej: <img/>.

- Las expresiones de javascript pueden ser embebidas dentro del codigo JSX incluyendolas entre llaves incluyendo variables, funciones y propiedades.

const name = 'Tania';
const heading = <h1>Hello, {name}</h1> ;


***** Como empezar un nuevo proyecto en React??? *****

- node y npm instalado.
- npx create-react-app [carpeta destino del proyecto (sin corchetes)]
- con npm start corro el proyecto en el browser


**** Para correr los componentes tenes que renderizarlos en App y pones npm start en la carpeta contenedora.*****

COMPONENTES:

- Casi todo en React consiste en componentes, (como la practica App que hicimos) que pueden ser componentes de clase, o componentes simples. (los componentes simples no usan la Key "class", simplificandose a una funcion con retorno.)

- La mayoría de las apliaciones React estan hechas por componentes mas pequeños y se cargan en el componente principal "App". Cada componente suele tener su propio archivo.

- Conviene separar los componentes en archivos ya que le da mas estabilidad a la aplicación.

- Todos los componentes personalizados (o de clase) se nombran con la primer letra en mayusculas, ej App, Table, etc.

- En App.js importamos cada componente de la manera import Table from './Table'; y lo renderizamos en el método render de App con el tag del mismo <Table/> dentro de un div.container


*** Props: Una de las cosas copadas es que en react se puede manejar Data, mediante propiedades (props) y estado.

- Los datos (Data) que manejan las props son anexados en el render() del componente padre (App.js) en forma de un JSON  dentro de una variable (characters en este caso).

- Posteriormente se pasan los datos a el componente hijo ( el que se encuentra en el return de App.js, <Table/> en este caso) como si fueran atributos. La propiedad la podemos llamar como quisieramos, aca la llamamos characterData. Cuando a una propiedad le pasamos data, ponemos la variable de la data entre {}.

return (
    <div className="container">
        <Table characterData={characters} />
    </div>
);

- ahora la Data pasa a través de <Table/>, ahora tenemos que ir a Table.js y declarar la propiedad characterData como propia del componente con const {characterData} = this.props; (aca declaras la propiedad del componente)
[Table.js]
class Table extends Component {
    render() {
        const { characterData } = this.props;

        return (
            <table>
                <TableHeader />
                <TableBody characterData={characterData} />
            </table>
        );
    }
}

- como table estaba dividido en <TableHeader /> y <TableBody /> queremos que la data se muestre en tablebody, por lo que vamos al componente y le pasamos el props(data) como parametro y mapeamos en el para retornar la tabla con los renglones (rows) característicos.

[TableBody.js]
const TableBody = props => { 
    const rows = props.characterData.map((row, index) => {
        return (
            <tr key={index}>
                <td>{row.name}</td>
                <td>{row.job}</td>
            </tr>
        );
    });
    return <tbody>{rows}</tbody>;
}

- para despues ser actualizada en la vista del MVC. Notese quye se usan keys en donde se almacenan los indices de las tablas a la hora de listar en React con motivos de identificación. Posteriormente va a ser necesario cuando querramos manipular items de lista.

- Las props son una manera efectiva de pasar datos a un componente de React, pero el componente no puede cambiar por si mismo las props, (son de solo lectura), mas adelante veremos como utlizar "ESTADOS" para manejar  y controlar datos en React. 


***** ESTADOS****

- Con las props, tenemos un flujo de dato de una sola dirección (pones datos y se renderizan), pero los estados nos permiten poder editar, actualizar o eliminar data en tiempo real en un componente.


- Esl estado vendría a ser cualquier dato que acaba de guardarse y modificarse sin la necesiadad de agregar al mismo a una base de datos. EJ: agregar y eliminar artículos de un carrito de compras antes de confirmar la compra.



* para empezar, vamos a crear un objeto de estado.

class App extendes Component{
    state = {};
}

*  el objeto va a contener propiedades para todo lo que quieras almacenar en el estado. En este caso, es un estado de personajes.


class App extendes Component{
    state = {
        characters:[
            //movemos el monton de datos de personajes que habiamos almacenado antes en "characters" aquí dentro.

            {
        name: 'Charlie',
        job: 'Janitor',
      }
      // etc...


        ]
    };
}

* una vez creado el objeto de estado, vamos a crear un metodo para poder eliminar un personaje de la tabla "removeCharacter" en la clase App.

- Para recuperar el estado, vamos a usar this.state.characters.
- Para actualizar el estado, vamos a usar this.setState(), es un método nativo para manipulacion de estados. Entonces vamos a filtrar (usando array.filter()) el array de datos usando el "index" que habíamos usado antes, y retornamos el nuevo array.

****** IMP!!!*******
Siempre utilizar this.setState()para modificar una matriz. Simplemente aplicando un nuevo valor this.state.property no funcionará.
******

[App.js]
removeCharacter = index => {
  const { characters } = this.state

  this.setState({
    characters: characters.filter((character, i) => {
      return i !== index
    }),
  })
}

- array.filter() no muta el array pero genera un array nuevo, y es el metodo preferencial para modificar array en JS. Lo que hacemos con este metodo es pasarle un indice para que lo compare con el resto del array original y nos devuelva el array completo menos el personaje del indice.

- Le pasamos la funcion a travé del componente y, renderizamos un boton al lado de cada personaje para que invoque la funcion. Pasamos removeCharacter a traves de una propiedad a <Table />.


[App.js]

return(
    <div className="container">
    <Table characterData={characters} removeCharacter={this.removeCharacter} />
  </div>
)


* no hay que olvidad de poner const {character} = this.state para actualizar la data en el estado correcto.

* Ya que el estado lo actualizamos en  <TableBody /> y  <Table /> tenemos que pasar como prop el método removeCharacter, como hicimos con la data de personajes.

[Table.js]
lass Table extends Component {
  render() {
    const { characterData, removeCharacter } = this.props

    return (
      <table>
        <TableHeader />
        <TableBody characterData={characterData} removeCharacter={removeCharacter} />
      </table>
    )
  }
}

* En el componente <TableBody /> pasaremos el índice del elemento que queremos eliminar como parámetro para que la función filter sepa qué elemento eliminar. Accionaremos el elemento con un boton y el método onClick.

[Table.js]

<tr key={index}>
  <td>{row.name}</td>
  <td>{row.job}</td>
  <td>
    <button onClick={() => props.removeCharacter(index)}>Delete</button>
  </td>
</tr>


** La funcion onClick debe pasar por una funcion que devuelve el método removeCHaracter(), de lo contrario, intentará ejecutarse automáticamente.

